
/*

ASINCRONISMO EN JAVASCRIPT

ðŸ”¹ Tema 1 â€” Â¿QuÃ© es el asincronismo?

    1.1 â€” JavaScript es sincrÃ³nico por naturaleza1.2 â€” Â¿QuÃ© cosas generan asincronismo en JavaScript?â€ƒâ€ƒðŸ“Œ Incluye observaciÃ³n clave sobre procesos que dependen de recursos externos1.3 â€” Todo lo que no estÃ© en esa lista es sincrÃ³nico1.4 â€” ConclusiÃ³n

ðŸ”¹ Tema 2 â€” Â¿CÃ³mo se gestiona el asincronismo en JavaScript?

    2.1 â€” El Event Loop: el nÃºcleo del asincronismo2.2 â€” Callbacksâ€ƒâ€ƒðŸ“Œ AclaraciÃ³n fundamental: no se hacen callbacks para lograr asincronismo;â€ƒâ€ƒel asincronismo lo genera la funciÃ³n que recibe ese callback (ej. setTimeout, FileReader)â€ƒâ€ƒðŸ“Œ Diferencia entre callbacks sincrÃ³nicos (ej. forEach) y asincrÃ³nicos (setTimeout)
    2.3 â€” Promesas (Promise)â€ƒâ€ƒðŸ“Œ Se explicarÃ¡ en el contexto real de fetch()â€ƒâ€ƒðŸ“Œ Importante: una promesa no es asincrÃ³nica por sÃ­ sola, su contenido debe serloâ€ƒâ€ƒðŸ“Œ Se mostrarÃ¡ .then(), .catch() con ejemplos reales
    2.4 â€” async / awaitâ€ƒâ€ƒðŸ“Œ CÃ³mo simplifica el uso de promesasâ€ƒâ€ƒðŸ“Œ Ventajas y limitacionesâ€ƒâ€ƒðŸ“Œ Ejemplo con fetch() y manejo de errores
    2.5 â€” Microtareas vs Macrotareas (opcional, avanzado)â€ƒâ€ƒðŸ“Œ Diferencias internas del Event Loopâ€ƒâ€ƒðŸ“Œ CuÃ¡ndo se ejecutan las promesas vs los temporizadores
    2.6 â€” ConclusiÃ³nâ€ƒâ€ƒðŸ“Œ CuÃ¡ndo usar callbacks, cuÃ¡ndo usar promesas, cuÃ¡ndo async/awaitâ€ƒâ€ƒðŸ“Œ GuÃ­a de buenas prÃ¡cticas

    ðŸ§ª Ejemplos centrales que se desarrollarÃ¡n en toda la guÃ­a:

    âœ… setTimeout()âœ… setInterval()âœ… FileReader.readAsText()âœ… fetch()

Todo lo demÃ¡s serÃ¡ considerado sincrÃ³nico salvo menciÃ³n especÃ­fica.

*/


window.addEventListener("load",()=>{

    console.log("El DOM ha cargado completamente.");


});
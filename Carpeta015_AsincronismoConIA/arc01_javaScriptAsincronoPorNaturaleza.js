
/*

ðŸ”¸ 1.1 â€” JavaScript es sincrÃ³nico por naturaleza
JavaScript es un lenguaje de ejecuciÃ³n single-threaded,
es decir, solo tiene un hilo principal donde se 
ejecuta el cÃ³digo. Esto significa que las instrucciones
se ejecutan secuencialmente, una lÃ­nea tras otra,
y cada lÃ­nea debe terminar de ejecutarse para que 
comience la siguiente.

Todo el cÃ³digo que hemos aprendido hasta ahora
en programaciÃ³n con JavaScript â€”como estructuras 
de 
    control (if, for, switch), 
    operaciones matemÃ¡ticas, 
    manipulaciÃ³n del DOM (innerHTML, appendChild),
    llamadas a funciones normales,
    manejo de arrays (forEach, map)â€” 
    es completamente sincrÃ³nico.

ðŸ”¹ Esto implica que:

    Si una lÃ­nea de cÃ³digo tarda mucho en 
    ejecutarse (por ejemplo, un bucle que 
    recorre millones de elementos), 
    bloquea la ejecuciÃ³n de todo lo que sigue.

    Si hay un console.log('A') 
        y luego 
    console.log('B'), 
    
    siempre se imprimirÃ¡ primero A y luego B.

ðŸ“Œ El entorno de ejecuciÃ³n de JavaScript no pasa 
a otra cosa automÃ¡ticamente ni ejecuta cÃ³digo 
"en segundo plano", a menos que se utilicen 
herramientas especÃ­ficas del lenguaje que 
introduzcan asincronismo 

    (como setTimeout, fetch, etc.).

*/

window.addEventListener("load",()=>{

    console.log("running");


})
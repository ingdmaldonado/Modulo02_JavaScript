
/*

ğŸ”¸ 1.2 â€” Â¿QuÃ© cosas generan asincronismo 
en JavaScript?

    JavaScript, por naturaleza, es sincrÃ³nico.
    Sin embargo, ciertas funciones y APIs 
    estÃ¡n construidas especialmente 
    para trabajar de forma asincrÃ³nica. 
    Esto significa que pueden iniciar 
    una tarea, delegarla fuera del hilo 
    principal, y continuar con el resto 
    del cÃ³digo sin esperar a que la tarea termine.

ğŸ”¹ Â¿CuÃ¡ndo se necesita asincronismo?
Cuando una operaciÃ³n depende de un recurso o evento externo (como una API, un archivo del sistema, o una acciÃ³n del usuario), y su duraciÃ³n no estÃ¡ controlada directamente por el motor de JavaScript. En estos casos, el asincronismo evita que el programa se congele esperando la respuesta.

ğŸ”¹ Sentencias que generan asincronismo 
real en JavaScript:

âœ… setTimeout() â†’ ejecuta una funciÃ³n 
una vez despuÃ©s de un tiempo 
determinado.
âœ… setInterval() â†’ ejecuta una funciÃ³n 
repetidamente con un intervalo definido.
âœ… FileReader.readAsText() â†’ lectura de archivos
 locales en el navegador.
 âœ… fetch() â†’ solicitudes HTTP 
 que retornan promesas.
 âœ… addEventListener(...) â†’ eventos del usuario
 que son asincrÃ³nicos en su disparo 
 (el cÃ³digo que se ejecuta sigue siendo sincrÃ³nico).
 âœ… WebSocket â†’ comunicaciÃ³n basada en eventos.
 âœ… Web Workers â†’ tareas delegadas a otro hilo.
 âœ… En Node.js: funciones como fs.readFile(),
 consultas a base de datos, operaciones de red, etc.

ğŸ”¸ Importante:

    Estas funciones ya estÃ¡n construidas 
    para delegar y manejar asincronismo. 
    Nosotros no creamos asincronismo al 
    escribir una funciÃ³n. 
    El asincronismo ocurre porque 
    usamos una API que lo gestiona internamente.

    En lenguajes como Java, es posible que el 
    programador cree manualmente nuevos hilos 
    de ejecuciÃ³n (threads), y los administre 
    de forma explÃ­cita. 
    Esto permite ejecutar tareas en paralelo,
    esperar sus resultados 
    (por ejemplo, usando Future) 
    y controlar de forma mÃ¡s directa la concurrencia
    y la asincronÃ­a.

    En JavaScript, esto no es posible de forma directa,
    ya que el lenguaje no permite crear 
    hilos personalizados desde cero. 
    Solo se puede trabajar de forma 
    asincrÃ³nica a travÃ©s de:

    Funciones provistas por el entorno (como las mencionadas anteriormente)
    Mecanismos como Web Workers, que permiten delegar trabajo a otro hilo, pero no son comparables con los hilos en Java, ya que tienen restricciones de comunicaciÃ³n y aislamiento del entorno principal.
    Esto significa que en JavaScript, el asincronismo estÃ¡ limitado a funciones especÃ­ficas del entorno. No existe la posibilidad de lanzar un hilo secundario arbitrario desde cÃ³digo JavaScript tradicional.
*/
